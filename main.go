package main

import (
	"bufio"
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"io/fs"
	"log"
	"mime/multipart"
	"net/http"
	"os"
	"os/exec"
	"path/filepath"
	"strings"
	"sync"
	"time"
)

type Repository struct {
	Name   string
	GitURL string
	WebURL string
	Path   string
}

type Config struct {
	Repositories     []Repository
	TelegramBotToken string
	TelegramChatID   string
}

func main() {
	log.SetFlags(log.LstdFlags | log.Lshortfile)
	
	cfg, err := getConfig()
	if err != nil {
		log.Fatalf("FATAL: –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: %v", err)
	}

	log.Printf("üöÄ –°–∫—Ä–∏–ø—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–ø—É—â–µ–Ω. –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤: %d", len(cfg.Repositories))

	var wg sync.WaitGroup
	for _, repo := range cfg.Repositories {
		wg.Add(1)
		go func(r Repository) {
			defer wg.Done()
			if err := checkRepository(r, cfg); err != nil {
				log.Printf("‚ùå ERROR: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ [%s]: %v", r.Name, err)
			}
		}(repo)
	}
	wg.Wait()

	log.Println("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
}

func getConfig() (Config, error) {
	token := os.Getenv("TELEGRAM_BOT_TOKEN")
	chatID := os.Getenv("TELEGRAM_CHAT_ID")
	
	log.Printf("üîë Telegram Bot Token: %s", maskToken(token))
	log.Printf("üí¨ Telegram Chat ID: %s", chatID)
	
	if token == "" || chatID == "" {
		return Config{}, fmt.Errorf("–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN –∏ TELEGRAM_CHAT_ID –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
	}

	return Config{
		Repositories: []Repository{
			{
				Name:   "nuclei-templates",
				GitURL: "https://github.com/projectdiscovery/nuclei-templates.git",
				WebURL: "https://github.com/projectdiscovery/nuclei-templates/blob/main",
				Path:   "nuclei-templates",
			},
			{
				Name:   "nucleihub-templates", 
				GitURL: "https://github.com/rix4uni/nucleihub-templates.git",
				WebURL: "https://github.com/rix4uni/nucleihub-templates/blob/main",
				Path:   "nucleihub-templates",
			},
		},
		TelegramBotToken: token,
		TelegramChatID:   chatID,
	}, nil
}

func maskToken(token string) string {
	if len(token) < 8 {
		return "***"
	}
	return token[:4] + "..." + token[len(token)-4:]
}

func checkRepository(repo Repository, cfg Config) error {
	log.Printf("üîç [%s] –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è", repo.Name)
	
	if err := prepareRepo(repo); err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: %w", err)
	}

	stateFile := fmt.Sprintf("known_templates_%s.txt", repo.Name)
	knownTemplates, err := readTemplatesFromFile(stateFile)
	isFirstRun := os.IsNotExist(err)

	if isFirstRun {
		log.Printf("üÜï [%s] –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫, —Ñ–∞–π–ª —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω", repo.Name)
	} else {
		log.Printf("üìÑ [%s] –ó–∞–≥—Ä—É–∂–µ–Ω–æ %d –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è", repo.Name, len(knownTemplates))
	}

	currentTemplates, err := scanForTemplates(repo.Path)
	if err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω—ã: %w", err)
	}

	log.Printf("üìä [%s] –¢–µ–∫—É—â–∏—Ö —à–∞–±–ª–æ–Ω–æ–≤: %d", repo.Name, len(currentTemplates))

	var newTemplates []string
	for _, tpl := range currentTemplates {
		if _, found := knownTemplates[tpl]; !found {
			newTemplates = append(newTemplates, tpl)
		}
	}

	if isFirstRun {
		log.Printf("üîÑ [%s] –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫. –ù–∞–π–¥–µ–Ω–æ %d —à–∞–±–ª–æ–Ω–æ–≤. –°–æ—Ö—Ä–∞–Ω—è—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ.", repo.Name, len(currentTemplates))
		message := fmt.Sprintf("‚úÖ *–ù–∞—á–∏–Ω–∞—é –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è `%s`*\\.\n\n–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ %d —à–∞–±–ª–æ–Ω–æ–≤\\. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –ø—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö\\.", repo.Name, len(currentTemplates))
		if err := sendTelegramMessage(message, cfg.TelegramBotToken, cfg.TelegramChatID); err != nil {
			log.Printf("‚ö†Ô∏è WARN: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è [%s]: %v", repo.Name, err)
		} else {
			log.Printf("üì± [%s] –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ", repo.Name)
		}
	} else if len(newTemplates) > 0 {
		log.Printf("üÜï [%s] –ù–∞–π–¥–µ–Ω–æ %d –Ω–æ–≤—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤. –û—Ç–ø—Ä–∞–≤–ª—è—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–º...", repo.Name, len(newTemplates))
		
		// –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è
		caption := fmt.Sprintf("üîî *–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã –≤ `%s` (%d —à—Ç\\.)*", repo.Name, len(newTemplates))

		// –°–æ–∑–¥–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è —Ñ–∞–π–ª–∞
		var fileContent strings.Builder
		for _, tpl := range newTemplates {
			relativePath := strings.TrimPrefix(tpl, repo.Path+string(filepath.Separator))
			fileURL := fmt.Sprintf("%s/%s", repo.WebURL, relativePath)
			fileContent.WriteString(fmt.Sprintf("%s\n", fileURL))
		}
		
		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
		fileName := fmt.Sprintf("new_templates_%s_%s.txt", repo.Name, time.Now().Format("2006-01-02"))
		if err := sendTelegramFile(caption, fileName, fileContent.String(), cfg.TelegramBotToken, cfg.TelegramChatID); err != nil {
			log.Printf("‚ùå WARN: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –¥–ª—è [%s]: %v", repo.Name, err)
		} else {
			log.Printf("üì± [%s] –§–∞–π–ª —Å –Ω–æ–≤—ã–º–∏ —à–∞–±–ª–æ–Ω–∞–º–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω", repo.Name)
		}
	} else {
		log.Printf("üëç [%s] –ù–æ–≤—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", repo.Name)
		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç, —á—Ç–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—à–ª–∞
		message := fmt.Sprintf("üîç *–ü—Ä–æ–≤–µ—Ä–∫–∞ `%s` –∑–∞–≤–µ—Ä—à–µ–Ω–∞*\\. –ù–æ–≤—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ –Ω–µ—Ç\\.", repo.Name)
		if err := sendTelegramMessage(message, cfg.TelegramBotToken, cfg.TelegramChatID); err != nil {
			log.Printf("‚ö†Ô∏è WARN: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –¥–ª—è [%s]: %v", repo.Name, err)
		}
	}

	if isFirstRun || len(newTemplates) > 0 {
		if err := writeTemplatesToFile(stateFile, currentTemplates); err != nil {
			return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ: %w", err)
		}
		log.Printf("üíæ [%s] –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ %s", repo.Name, stateFile)
	}

	return nil
}

func prepareRepo(repo Repository) error {
	if _, err := os.Stat(repo.Path); os.IsNotExist(err) {
		log.Printf("üì• [%s] –ö–ª–æ–Ω–∏—Ä—É—é —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π...", repo.Name)
		cmd := exec.Command("git", "clone", "--depth", "1", repo.GitURL, repo.Path)
		if output, err := cmd.CombinedOutput(); err != nil {
			log.Printf("‚ùå [%s] –û—à–∏–±–∫–∞ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: %s", repo.Name, string(output))
			return err
		}
	} else {
		log.Printf("üîÑ [%s] –û–±–Ω–æ–≤–ª—è—é —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π...", repo.Name)
		cmd := exec.Command("git", "-C", repo.Path, "pull")
		if output, err := cmd.CombinedOutput(); err != nil {
			log.Printf("‚ùå [%s] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: %s", repo.Name, string(output))
			return err
		}
	}
	return nil
}

func scanForTemplates(dir string) ([]string, error) {
	var files []string
	err := filepath.WalkDir(dir, func(path string, d fs.DirEntry, err error) error {
		if err == nil && !d.IsDir() && (strings.HasSuffix(path, ".yaml") || strings.HasSuffix(path, ".yml")) {
			files = append(files, path)
		}
		return err
	})
	return files, err
}

func readTemplatesFromFile(file string) (map[string]bool, error) {
	f, err := os.Open(file)
	if err != nil {
		return make(map[string]bool), err
	}
	defer f.Close()
	templates := make(map[string]bool)
	scanner := bufio.NewScanner(f)
	for scanner.Scan() {
		templates[scanner.Text()] = true
	}
	return templates, scanner.Err()
}

func writeTemplatesToFile(file string, templates []string) error {
	log.Printf("üíæ –ó–∞–ø–∏—Å—å %d —à–∞–±–ª–æ–Ω–æ–≤ –≤ —Ñ–∞–π–ª %s", len(templates), file)
	f, err := os.Create(file)
	if err != nil {
		return err
	}
	defer f.Close()
	writer := bufio.NewWriter(f)
	for _, tpl := range templates {
		if _, err := writer.WriteString(tpl + "\n"); err != nil {
			return err
		}
	}
	return writer.Flush()
}

func sendTelegramMessage(message, token, chatID string) error {
	apiURL := fmt.Sprintf("https://api.telegram.org/bot%s/sendMessage", token)
	payload, _ := json.Marshal(map[string]string{
		"chat_id":    chatID,
		"text":       message,
		"parse_mode": "MarkdownV2",
	})
	
	log.Printf("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram...")
	resp, err := http.Post(apiURL, "application/json", bytes.NewBuffer(payload))
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–∞: %w", err)
	}
	defer resp.Body.Close()
	
	bodyBytes, _ := io.ReadAll(resp.Body)
	log.Printf("üì• –û—Ç–≤–µ—Ç Telegram API (status: %d): %s", resp.StatusCode, string(bodyBytes))
	
	if resp.StatusCode != http.StatusOK {
		var body map[string]interface{}
		json.Unmarshal(bodyBytes, &body)
		return fmt.Errorf("—Å—Ç–∞—Ç—É—Å-–∫–æ–¥ %d: %v", resp.StatusCode, body)
	}
	return nil
}

func sendTelegramFile(caption, fileName, fileContent, token, chatID string) error {
	apiURL := fmt.Sprintf("https://api.telegram.org/bot%s/sendDocument", token)

	body := &bytes.Buffer{}
	writer := multipart.NewWriter(body)

	writer.WriteField("chat_id", chatID)
	writer.WriteField("caption", caption)
	writer.WriteField("parse_mode", "MarkdownV2")

	part, err := writer.CreateFormFile("document", fileName)
	if err != nil {
		return err
	}
	
	_, err = io.Copy(part, strings.NewReader(fileContent))
	if err != nil {
		return err
	}

	writer.Close()

	req, err := http.NewRequest("POST", apiURL, body)
	if err != nil {
		return err
	}
	req.Header.Set("Content-Type", writer.FormDataContentType())

	log.Printf("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª –≤ Telegram...")
	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–∞: %w", err)
	}
	defer resp.Body.Close()

	bodyBytes, _ := io.ReadAll(resp.Body)
	log.Printf("üì• –û—Ç–≤–µ—Ç Telegram API (status: %d): %s", resp.StatusCode, string(bodyBytes))

	if resp.StatusCode != http.StatusOK {
		var respBody map[string]interface{}
		json.Unmarshal(bodyBytes, &respBody)
		return fmt.Errorf("—Å—Ç–∞—Ç—É—Å-–∫–æ–¥ %d: %v", resp.StatusCode, respBody)
	}

	return nil
}
