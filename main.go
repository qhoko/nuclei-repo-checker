package main

import (
	"bufio"
	"bytes"
	"encoding/json"
	"fmt"
	"io/fs"
	"log"
	"net/http"
	"os"
	"os/exec"
	"path/filepath"
	"strings"
	"sync"
 )

// Repository –æ–ø–∏—Å—ã–≤–∞–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
type Repository struct {
	Name   string
	GitURL string
	WebURL string
	Path   string
}

type Config struct {
	Repositories     []Repository
	TelegramBotToken string
	TelegramChatID   string
}

// –õ–∏–º–∏—Ç –¥–ª–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
const telegramMessageLimit = 4096

func main() {
	cfg, err := getConfig()
	if err != nil {
		log.Fatalf("FATAL: –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: %v", err)
	}

	log.Println("–°–∫—Ä–∏–ø—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–ø—É—â–µ–Ω.")

	var wg sync.WaitGroup
	for _, repo := range cfg.Repositories {
		wg.Add(1)
		go func(r Repository) {
			defer wg.Done()
			if err := checkRepository(r, cfg); err != nil {
				log.Printf("ERROR: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ [%s]: %v", r.Name, err)
			}
		}(repo)
	}
	wg.Wait()

	log.Println("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
}

func getConfig() (Config, error) {
	token := os.Getenv("TELEGRAM_BOT_TOKEN")
	chatID := os.Getenv("TELEGRAM_CHAT_ID")
	if token == "" || chatID == "" {
		return Config{}, fmt.Errorf("–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN –∏ TELEGRAM_CHAT_ID –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
	}

	return Config{
		Repositories: []Repository{
			{
				Name:   "nuclei-templates",
				GitURL: "https://github.com/projectdiscovery/nuclei-templates.git",
				WebURL: "https://github.com/projectdiscovery/nuclei-templates/blob/master",
				Path:   "nuclei-templates",
			},
			{
				Name:   "nucleihub-templates",
				GitURL: "https://github.com/rix4uni/nucleihub-templates.git",
				WebURL: "https://github.com/rix4uni/nucleihub-templates/blob/main",
				Path:   "nucleihub-templates",
			},
		},
		TelegramBotToken: token,
		TelegramChatID:   chatID,
	}, nil
}

func checkRepository(repo Repository, cfg Config ) error {
	if err := prepareRepo(repo); err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: %w", err)
	}

	stateFile := fmt.Sprintf("known_templates_%s.txt", repo.Name)
	knownTemplates, err := readTemplatesFromFile(stateFile)
	isFirstRun := os.IsNotExist(err)

	currentTemplates, err := scanForTemplates(repo.Path)
	if err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω—ã: %w", err)
	}

	var newTemplates []string
	for _, tpl := range currentTemplates {
		if _, found := knownTemplates[tpl]; !found {
			newTemplates = append(newTemplates, tpl)
		}
	}

	if isFirstRun {
		log.Printf("[%s] –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫. –ù–∞–π–¥–µ–Ω–æ %d —à–∞–±–ª–æ–Ω–æ–≤. –°–æ—Ö—Ä–∞–Ω—è—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ.", repo.Name, len(currentTemplates))
		message := fmt.Sprintf("‚úÖ *–ù–∞—á–∏–Ω–∞—é –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è `%s`*\\.\n\n–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ %d —à–∞–±–ª–æ–Ω–æ–≤\\. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –ø—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö\\.", repo.Name, len(currentTemplates))
		if err := sendTelegramMessage(message, cfg.TelegramBotToken, cfg.TelegramChatID); err != nil {
			log.Printf("WARN: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è [%s]: %v", repo.Name, err)
		}
	} else if len(newTemplates) > 0 {
		log.Printf("[%s] –ù–∞–π–¥–µ–Ω–æ %d –Ω–æ–≤—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤. –û—Ç–ø—Ä–∞–≤–ª—è—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ...", repo.Name, len(newTemplates))
		
		header := escapeMarkdownV2(fmt.Sprintf("üîî *–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã –≤ `%s` (%d —à—Ç.)*\n\n", repo.Name, len(newTemplates)))
		var messages []string
		currentMessage := header

		for _, tpl := range newTemplates {
			relativePath := strings.TrimPrefix(tpl, repo.Path+string(filepath.Separator))
			// URL –Ω–µ –Ω—É–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å, –∞ –∏–º—è —Ñ–∞–π–ª–∞ –≤ —Ç–µ–∫—Å—Ç–µ —Å—Å—ã–ª–∫–∏ - –Ω—É–∂–Ω–æ
			fileURL := fmt.Sprintf("%s/%s", repo.WebURL, relativePath)
			line := fmt.Sprintf("‚Ä¢ [%s](%s)\n", escapeMarkdownV2(relativePath), fileURL)

			if len(currentMessage)+len(line) > telegramMessageLimit {
				messages = append(messages, currentMessage)
				currentMessage = header // –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–æ–≥–æ –∂–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
			}
			currentMessage += line
		}
		messages = append(messages, currentMessage) // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ (–∏–ª–∏ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ) —Å–æ–æ–±—â–µ–Ω–∏–µ

		for i, msg := range messages {
			log.Printf("–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è %d/%d –¥–ª—è %s", i+1, len(messages), repo.Name)
			if err := sendTelegramMessage(msg, cfg.TelegramBotToken, cfg.TelegramChatID); err != nil {
				// –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
				log.Printf("WARN: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–∞—Å—Ç—å %d —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è [%s]: %v", i+1, repo.Name, err)
			}
		}
	} else {
		log.Printf("[%s] –ù–æ–≤—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", repo.Name)
	}

	if isFirstRun || len(newTemplates) > 0 {
		return writeTemplatesToFile(stateFile, currentTemplates)
	}

	return nil
}

func prepareRepo(repo Repository) error {
	if _, err := os.Stat(repo.Path); os.IsNotExist(err) {
		log.Printf("[%s] –ö–ª–æ–Ω–∏—Ä—É—é —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π...", repo.Name)
		// –ò—Å–ø–æ–ª—å–∑—É–µ–º --depth 1 –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
		return exec.Command("git", "clone", "--depth", "1", repo.GitURL, repo.Path).Run()
	}
	log.Printf("[%s] –û–±–Ω–æ–≤–ª—è—é —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π...", repo.Name)
	// –°–Ω–∞—á–∞–ª–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å, –ø–æ—Ç–æ–º –æ–±–Ω–æ–≤–ª—è–µ–º
	if err := exec.Command("git", "-C", repo.Path, "reset", "--hard").Run(); err != nil {
		return err
	}
	return exec.Command("git", "-C", repo.Path, "pull").Run()
}

func scanForTemplates(dir string) ([]string, error) {
	var files []string
	err := filepath.WalkDir(dir, func(path string, d fs.DirEntry, err error) error {
		if err == nil && !d.IsDir() && (strings.HasSuffix(path, ".yaml") || strings.HasSuffix(path, ".yml")) {
			files = append(files, path)
		}
		return err
	})
	return files, err
}

func readTemplatesFromFile(file string) (map[string]bool, error) {
	f, err := os.Open(file)
	if err != nil {
		return make(map[string]bool), err
	}
	defer f.Close()
	templates := make(map[string]bool)
	scanner := bufio.NewScanner(f)
	for scanner.Scan() {
		templates[scanner.Text()] = true
	}
	return templates, scanner.Err()
}

func writeTemplatesToFile(file string, templates []string) error {
	log.Printf("–ó–∞–ø–∏—Å—å %d —à–∞–±–ª–æ–Ω–æ–≤ –≤ —Ñ–∞–π–ª %s", len(templates), file)
	f, err := os.Create(file)
	if err != nil {
		return err
	}
	defer f.Close()
	writer := bufio.NewWriter(f)
	for _, tpl := range templates {
		if _, err := writer.WriteString(tpl + "\n"); err != nil {
			return err
		}
	}
	return writer.Flush()
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è MarkdownV2
func escapeMarkdownV2(text string) string {
	replacer := strings.NewReplacer(
		"_", "\\_", "*", "\\*", "[", "\\[", "]", "\\]", "(", "\\(", ")", "\\)",
		"~", "\\~", "`", "\\`", ">", "\\>", "#", "\\#", "+", "\\+", "-", "\\-",
		"=", "\\=", "|", "\\|", "{", "\\{", "}", "\\}", ".", "\\.", "!", "\\!",
	)
	return replacer.Replace(text)
}

func sendTelegramMessage(message, token, chatID string) error {
	apiURL := fmt.Sprintf("https://api.telegram.org/bot%s/sendMessage", token )
	payload, _ := json.Marshal(map[string]string{
		"chat_id":    chatID,
		"text":       message,
		"parse_mode": "MarkdownV2",
		"disable_web_page_preview": "true", // –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–≤—å—é —Å—Å—ã–ª–æ–∫, —á—Ç–æ–±—ã —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –∫–æ–º–ø–∞–∫—Ç–Ω–µ–µ
	})

	resp, err := http.Post(apiURL, "application/json", bytes.NewBuffer(payload ))
	if err != nil {
		return err
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		var body map[string]interface{}
		json.NewDecoder(resp.Body ).Decode(&body)
		return fmt.Errorf("–Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å-–∫–æ–¥ –æ—Ç Telegram API: %d, –æ—Ç–≤–µ—Ç: %v", resp.StatusCode, body)
	}
	return nil
}
