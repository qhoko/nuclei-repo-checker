// –í—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ —ç—Ç–æ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∫–æ–¥
package main

import (
	"bufio"
	"bytes"
	"encoding/json"
	"fmt"
	"io/fs"
	"log"
	"net/http"
	"os"
	"os/exec"
	"path/filepath"
	"strings"
	"sync"
 )

// Repository –æ–ø–∏—Å—ã–≤–∞–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
type Repository struct {
	Name string // –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –¥–ª—è –ª–æ–≥–æ–≤ –∏ —Ñ–∞–π–ª–æ–≤
	URL  string // Git URL
	Path string // –õ–æ–∫–∞–ª—å–Ω–∞—è –ø–∞–ø–∫–∞
}

// Config —Ö—Ä–∞–Ω–∏—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–∫—Ä–∏–ø—Ç–∞
type Config struct {
	Repositories     []Repository
	TelegramBotToken string
	TelegramChatID   string
}

func main() {
	cfg, err := getConfig()
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: %v", err)
	}

	log.Println("–°–∫—Ä–∏–ø—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–ø—É—â–µ–Ω.")

	var wg sync.WaitGroup
	for _, repo := range cfg.Repositories {
		wg.Add(1)
		go func(r Repository) {
			defer wg.Done()
			if err := checkRepository(r, cfg.TelegramBotToken, cfg.TelegramChatID); err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ [%s]: %v", r.Name, err)
			}
		}(repo)
	}
	wg.Wait()

	log.Println("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
}

// getConfig —Å–æ–±–∏—Ä–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
func getConfig() (Config, error) {
	token := os.Getenv("TELEGRAM_BOT_TOKEN")
	chatID := os.Getenv("TELEGRAM_CHAT_ID")

	if token == "" || chatID == "" {
		return Config{}, fmt.Errorf("–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN –∏ TELEGRAM_CHAT_ID –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
	}

	return Config{
		Repositories: []Repository{
			{"nuclei-templates", "https://github.com/projectdiscovery/nuclei-templates.git", "nuclei-templates"},
			{"nucleihub-templates", "https://github.com/rix4uni/nucleihub-templates.git", "nucleihub-templates"},
		},
		TelegramBotToken: token,
		TelegramChatID:   chatID,
	}, nil
}

// checkRepository –≤—ã–ø–æ–ª–Ω—è–µ—Ç –≤—Å—é –ª–æ–≥–∏–∫—É –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
func checkRepository(repo Repository, token, chatID string ) error {
	// –®–∞–≥ 1: –ö–ª–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
	if err := prepareRepo(repo); err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: %w", err)
	}

	stateFile := fmt.Sprintf("known_templates_%s.txt", repo.Name)
	_, err := os.Stat(stateFile)
	isFirstRun := os.IsNotExist(err)

	// –®–∞–≥ 2: –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤
	knownTemplates, _ := readTemplatesFromFile(stateFile)
	currentTemplates, err := scanForTemplates(repo.Path)
	if err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω—ã: %w", err)
	}

	// –®–∞–≥ 3: –ù–∞–π—Ç–∏ –Ω–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã
	var newTemplates []string
	for _, tpl := range currentTemplates {
		if _, found := knownTemplates[tpl]; !found {
			newTemplates = append(newTemplates, tpl)
		}
	}

	// –®–∞–≥ 4: –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏/–∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
	if len(newTemplates) > 0 {
		if !isFirstRun {
			if err := notifyAboutNewTemplates(repo, newTemplates, token, chatID); err != nil {
				log.Printf("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è [%s]: %v", repo.Name, err)
			}
		}
		if err := writeTemplatesToFile(stateFile, currentTemplates); err != nil {
			return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ñ–∞–π–ª —Å–æ—Å—Ç–æ—è–Ω–∏—è: %w", err)
		}
	}

	return nil
}

// --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

func prepareRepo(repo Repository) error {
	if _, err := os.Stat(repo.Path); os.IsNotExist(err) {
		return exec.Command("git", "clone", "--depth", "1", repo.URL, repo.Path).Run()
	}
	return exec.Command("git", "-C", repo.Path, "pull").Run()
}

func scanForTemplates(dir string) ([]string, error) {
	var files []string
	err := filepath.WalkDir(dir, func(path string, d fs.DirEntry, err error) error {
		if err == nil && !d.IsDir() && strings.HasSuffix(path, ".yaml") {
			files = append(files, path)
		}
		return err
	})
	return files, err
}

func readTemplatesFromFile(file string) (map[string]bool, error) {
	f, err := os.Open(file)
	if err != nil {
		return make(map[string]bool), err
	}
	defer f.Close()
	templates := make(map[string]bool)
	scanner := bufio.NewScanner(f)
	for scanner.Scan() {
		templates[scanner.Text()] = true
	}
	return templates, scanner.Err()
}

func writeTemplatesToFile(file string, templates []string) error {
	f, err := os.Create(file)
	if err != nil {
		return err
	}
	defer f.Close()
	writer := bufio.NewWriter(f)
	for _, tpl := range templates {
		if _, err := writer.WriteString(tpl + "\n"); err != nil {
			return err
		}
	}
	return writer.Flush()
}

func notifyAboutNewTemplates(repo Repository, templates []string, token, chatID string) error {
	var msg strings.Builder
	msg.WriteString(fmt.Sprintf("üîî *–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã –≤ `%s` (%d —à—Ç.):*\n\n", repo.Name, len(templates)))
	for _, tpl := range templates {
		cleanPath := strings.TrimPrefix(tpl, repo.Path+string(filepath.Separator))
		msg.WriteString(fmt.Sprintf("`%s`\n", cleanPath))
	}

	apiURL := fmt.Sprintf("https://api.telegram.org/bot%s/sendMessage", token )
	payload, _ := json.Marshal(map[string]string{
		"chat_id":    chatID,
		"text":       msg.String(),
		"parse_mode": "Markdown",
	})

	resp, err := http.Post(apiURL, "application/json", bytes.NewBuffer(payload ))
	if err != nil {
		return err
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return fmt.Errorf("–Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å-–∫–æ–¥ –æ—Ç Telegram API: %d", resp.StatusCode )
	}

	log.Printf("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è [%s] —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.", repo.Name)
	return nil
}