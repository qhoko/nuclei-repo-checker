name: Check for new Nuclei templates

on:
  schedule:
    - cron: '0 5 * * *' # Раз в день в 05:00 UTC
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    env:
      TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
      TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      # ШАГ 1: Устанавливаем зависимости Go, чтобы появился go.sum
      - name: Install dependencies
        run: go mod tidy

      # ШАГ 2: Кэшируем Go-модули для ускорения будущих сборок
      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      # ШАГ 3: Восстанавливаем файлы состояния из кэша
      - name: Restore state files from cache
        id: cache-state-restore
        uses: actions/cache/restore@v4
        with:
          path: known_templates_*.txt
          # Ключ восстановления ищет самый свежий кэш
          restore-keys: |
            ${{ runner.os }}-state-
          # Ключ для сохранения будет точным, на основе хэша файлов
          key: ${{ runner.os }}-state-${{ hashFiles('known_templates_*.txt') }}

      - name: Run checker
        run: go run main.go

      # ШАГ 4: Сохраняем обновленные файлы состояния в кэш
      # Этот шаг сработает только если кэш не был найден на шаге 3 (т.е. файлы изменились)
      - name: Save state files to cache
        id: cache-state-save
        uses: actions/cache/save@v4
        with:
          path: known_templates_*.txt
          # Ключ должен быть таким же, как на шаге restore
          key: ${{ steps.cache-state-restore.outputs.cache-primary-key }}

