name: Check for new Nuclei templates

on:
  schedule:
    - cron: '0 5 * * *' # Раз в день в 05:00 UTC
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    env:
      TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
      TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
          # Отключаем встроенное в setup-go кэширование, чтобы управлять им вручную
          cache: false 

      # ШАГ 1: Восстанавливаем кэш Go-модулей, если он есть
      - name: Restore Go modules cache
        id: cache-go-restore
        uses: actions/cache/restore@v4
        with:
          path: ~/go/pkg/mod
          # Ключ восстановления ищет любой подходящий кэш
          restore-keys: |
            ${{ runner.os }}-go-

      # ШАГ 2: Устанавливаем зависимости. go mod tidy создаст/обновит go.sum
      - name: Install dependencies
        run: go mod tidy

      # ШАГ 3: Сохраняем кэш Go-модулей
      # Этот шаг сработает, только если зависимости изменились (т.е. хэш go.sum поменялся)
      - name: Save Go modules cache
        uses: actions/cache/save@v4
        with:
          path: ~/go/pkg/mod
          # Ключ для сохранения теперь будет точным, т.к. go.sum уже существует
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        # Условие: выполняем, только если кэш не был полностью восстановлен на шаге 1
        if: steps.cache-go-restore.outputs.cache-hit != 'true'

      # ШАГ 4: Восстанавливаем файлы состояния (known_templates)
      - name: Restore state files cache
        id: cache-state-restore
        uses: actions/cache/restore@v4
        with:
          path: known_templates_*.txt
          # Ищем самый свежий кэш по префиксу
          restore-keys: |
            ${{ runner.os }}-state-
          # Ключ для сохранения будет точным, на основе хэша файлов
          key: ${{ runner.os }}-state-${{ hashFiles('known_templates_*.txt') }}

      - name: Run checker
        run: go run main.go

      # ШАГ 5: Сохраняем обновленные файлы состояния в кэш
      # Сработает, только если файлы known_templates_*.txt изменились
      - name: Save state files cache
        uses: actions/cache/save@v4
        with:
          path: known_templates_*.txt
          key: ${{ steps.cache-state-restore.outputs.cache-primary-key }}
        # Условие: выполняем, только если кэш не был полностью восстановлен на шаге 4
        if: steps.cache-state-restore.outputs.cache-hit != 'true'

